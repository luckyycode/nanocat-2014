//
//          *                  *
//             __                *
//           ,db'    *     *
//          ,d8/       *        *    *
//          888
//          `db\       *     *
//            `o`_                    **
//         *               *   *    _      *
//               *                 / )
//             *    /\__/\ *       ( (  *
//           ,-.,-.,)    (.,-.,-.,-.) ).,-.,-.
//          | @|  ={      }= | @|  / / | @|o |
//         _j__j__j_)     `-------/ /__j__j__j_
//          ________(               /___________
//          |  | @| \              || o|O | @|
//          |o |  |,'\       ,   ,'"|  |  |  |  hjw
//          vV\|/vV|`-'\  ,---\   | \Vv\hjwVv\//v
//                     _) )    `. \ /
//                    (__/       ) )
//    _   _        _                                _
//   | \ | |  ___ | | __ ___     ___  _ __    __ _ (_) _ __    ___
//   |  \| | / _ \| |/ // _ \   / _ \| '_ \  / _` || || '_ \  / _ \
//   | |\  ||  __/|   <| (_) | |  __/| | | || (_| || || | | ||  __/
//   |_| \_| \___||_|\_\\___/   \___||_| |_| \__, ||_||_| |_| \___|
//                                           |___/
//
//  Deferred point light shading.
//  Use geometric meshes for light forms.


#ifdef _VERTEX_

layout(location = 0) in vec4 position;
layout(location = 1) in vec4 normal;
layout(location = 2) in vec3 color;

uniform mat4 objectMatrix;
uniform mat4 worldMatrix;
uniform mat4 perspectiveMatrix;

uniform vec3 center;

noperspective out vec3 vCenter;
smooth out vec4 vWorldPos;

void main()
{
    // ModelView * Position
    vec4 localSpace = objectMatrix * position;
    // View * previous line
    vec4 worldSpace = worldMatrix * localSpace;
    
    gl_Position = perspectiveMatrix * worldSpace;

    vCenter = ( worldMatrix * vec4( center, 1.0 ) ).xyz;

    vWorldPos = gl_Position;
}

#endif

#ifdef _FRAGMENT_

uniform sampler2D normalTexture;        // World normals.
uniform sampler2D depthTexture;         // Scene depth.
uniform mat4 perspectiveInvMatrix;      // Inverted perspective matrix.

noperspective in vec3 vCenter;                 // Mesh position.
smooth in vec4 vWorldPos;                      // Mesh in world.


uniform float lightSize;                // Light size.
uniform vec3 lightColor;

out vec4 colorOut;

void main()
{
    // Get world normalized position.
    // Get projective texture coordinates.
    vec3 pos = vWorldPos.xyz / vWorldPos.w;
    vec2 uv  = pos.xy * 0.5 + 0.5;
    
    float depth = texture( depthTexture, uv ).x * 2.0 - 1.0 ;
    vec3 N = normalize( texture( normalTexture, uv ).xyz * 2.0 - 1.0 );

    // Replace z-value by depth.
    pos.z = depth;
    
    // World position.
    vec4 worldPos = perspectiveInvMatrix * vec4( pos, 1.0 );
    worldPos.xyz /= worldPos.w;
    
    // World to point light geometry mesh vector.
    vec3 dir = worldPos.xyz - vCenter;
    
    // Distance between world position and light point position;
    float l = length( dir );
    float dist = 1.0 - pow( clamp( l, 0.0, lightSize ) / lightSize, 2.0 );
    float lambert = clamp( dot( normalize( -dir ), N ), 0.0, 1.0 );
    
    colorOut = vec4( lightColor * dist * lambert, 1.0 );
}

#endif