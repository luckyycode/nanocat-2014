//
//          *                  *
//             __                *
//           ,db'    *     *
//          ,d8/       *        *    *
//          888
//          `db\       *     *
//            `o`_                    **
//         *               *   *    _      *
//               *                 / )
//             *    /\__/\ *       ( (  *
//           ,-.,-.,)    (.,-.,-.,-.) ).,-.,-.
//          | @|  ={      }= | @|  / / | @|o |
//         _j__j__j_)     `-------/ /__j__j__j_
//          ________(               /___________
//          |  | @| \              || o|O | @|
//          |o |  |,'\       ,   ,'"|  |  |  |  hjw
//          vV\|/vV|`-'\  ,---\   | \Vv\hjwVv\//v
//                     _) )    `. \ /
//                    (__/       ) )
//    _   _        _                                _
//   | \ | |  ___ | | __ ___     ___  _ __    __ _ (_) _ __    ___
//   |  \| | / _ \| |/ // _ \   / _ \| '_ \  / _` || || '_ \  / _ \
//   | |\  ||  __/|   <| (_) | |  __/| | | || (_| || || | | ||  __/
//   |_| \_| \___||_|\_\\___/   \___||_| |_| \__, ||_||_| |_| \___|
//                                           |___/
//
//  OpenGL grass/flower and any other foliage shader.
//


#ifdef _VERTEX_

uniform mat4 MVP; // View * Projection

uniform vec4 mPosition;
uniform vec2 mGrassLod;
uniform vec4 mCameraPos_Time;

//uniform sampler2D m_Noise;

uniform float mRotation;

uniform float mMoveFactor = 0.06; // Play around with this
uniform float mWindStrength = 0.7;
uniform vec2 mWindDirection = vec2(0.7);

layout(location = 0) in vec3 inPosition;
//layout(location = 1) in vec2 inUV;

noperspective out vec2 UV;

void main()
{
    UV = (inPosition.xy + vec2( 1.0, 1.0 )) / 2.0;

    // Distance from current vertex to camera
    float mDist = length( (inPosition + mPosition.xyz) - mCameraPos_Time.xyz );
    
    // It actually computes white circle fading at its borders - ideal to multiply with grass height
    // So that transition is a lot smoother
    float mMult = 1.0 - pow( min( mDist / mGrassLod.y, 1.0 ), 10.0 );

    vec3 displacedVertex = inPosition;

#ifdef USE_ANIMATION
    if( inPosition.y >= 0.1 )
    {
        vec3 wvPosition = displacedVertex.xyz * vec3( 1.0, mMult, 1.0 ) + mPosition.xyz * 0.1;
        
        displacedVertex.x += mMoveFactor * sin( mCameraPos_Time.w ) + (mWindStrength  * mWindDirection.x) * 0.001;
        displacedVertex.z += mMoveFactor * cos( mCameraPos_Time.w ) + (mWindStrength * mWindDirection.y) * 0.001;
    }
#endif
    
    // Rotate! mmmm
    displacedVertex.z = displacedVertex.x * cos(/*mRotation*/mPosition.w) + displacedVertex.z * sin(/*mRotation*/mPosition.w);

    // Output position - notice we're multiplying to get smooth transition and adding height of current vertex and position of current cell
    gl_Position = MVP * vec4( (displacedVertex.xyz * 6.0) * vec3(1.0, mMult, 1.0) + mPosition.xyz, 1.0);
}

#endif

#ifdef _FRAGMENT_

layout(location = 0) out vec4 outColor;
layout(location = 1) out vec4 outNormals;
layout(location = 2) out vec4 outLight;
layout(location = 4) out vec4 outPosition;

uniform sampler2D diffuseTex;

#ifdef USE_NORMALMAPPING
    uniform sampler2D normalTex;
#endif

noperspective in vec2 UV;

void main()
{
    vec4 diffuseMap = texture( diffuseTex, UV );
    
    if( diffuseMap.a < 0.5 )
    {
        discard; // Alpha!
    }
    
#ifdef USE_NORMALMAPPING
    vec4 normalMap = normalize(texture( normalTex, UV ) * 2.0 - 1.0);
#else
    vec4 normalMap = vec4( 0.5 );
#endif
    
    outColor = diffuseMap;// * 3.5;
    outNormals = vec4( normalMap.x * 0.5 + 0.5, normalMap.y * 0.5 + 0.5, normalMap.z * 0.5 + 0.5, 1.0 );
    outLight = vec4(0.01, 0.1, 1.0, 0.0);
    outPosition = vec4(0.0);
}

#endif

