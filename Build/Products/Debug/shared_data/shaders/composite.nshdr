//
//          *                  *
//             __                *
//           ,db'    *     *
//          ,d8/       *        *    *
//          888
//          `db\       *     *
//            `o`_                    **
//         *               *   *    _      *
//               *                 / )
//             *    /\__/\ *       ( (  *
//           ,-.,-.,)    (.,-.,-.,-.) ).,-.,-.
//          | @|  ={      }= | @|  / / | @|o |
//         _j__j__j_)     `-------/ /__j__j__j_
//          ________(               /___________
//          |  | @| \              || o|O | @|
//          |o |  |,'\       ,   ,'"|  |  |  |  hjw
//          vV\|/vV|`-'\  ,---\   | \Vv\hjwVv\//v
//                     _) )    `. \ /
//                    (__/       ) )
//    _   _        _                                _
//   | \ | |  ___ | | __ ___     ___  _ __    __ _ (_) _ __    ___
//   |  \| | / _ \| |/ // _ \   / _ \| '_ \  / _` || || '_ \  / _ \
//   | |\  ||  __/|   <| (_) | |  __/| | | || (_| || || | | ||  __/
//   |_| \_| \___||_|\_\\___/   \___||_| |_| \__, ||_||_| |_| \___|
//                                           |___/
//
//  OpenGL composite shader.
//

#ifdef USE_PRECISION
    precision PRECISION_TYPE float;
#endif


#ifdef _VERTEX_

layout( location = 0 ) in vec3 model_vertexpos;
//layout( location = 1 ) in vec2 model_uvs;

noperspective out vec2 UV;

void main()
{
	//UV = model_uvs;
    UV = (model_vertexpos.xy + vec2( 1.0, 1.0 )) / 2.0;
	gl_Position =  vec4( model_vertexpos, 1.0 );
}

#endif

#ifdef _FRAGMENT_

#define PI  3.14159265
#define PI2 PI * 2.0

//! UV coords.
noperspective in vec2 UV;

uniform sampler2D renderedTexture;      //! Scene diffuse (albedo) texture. POST-PROCESS.
uniform sampler2D depthTexture;         //! Depth scene from PRE-PROCESS.
uniform sampler2D emissiveSampler;      //! Emissive sampler.

uniform float fBloomIntensity;
//! Render target texture out.
layout( location = 0 ) out vec4 color;

//CROSSPROCESS
#define CrossContrast			0.95  	//[0.5 to 2.00] The names of these values should explain their functions
#define CrossSaturation			1.12  	//[0.5 to 2.00]
#define CrossBrightness			-0.012  //[-0.3 to 0.30]
#define CrossAmount			1.0 	//[0.05 to 1.5]
//#define CROSSPASS1
#define COLOR_BOOST	0.175					// 0.0 = normal saturation. Higher values mean more saturated image.


//!  Lens.
//#ifdef USE_LENS

uniform sampler2D uLensColor;

//#endif

uniform float fBrightness= 1.0f;

vec4 Linear2Gamma(vec4 color) {
    return vec4(sqrt(color.r), sqrt(color.g), sqrt(color.b), color.a);
}

vec4 Gamma2Linear(vec4 color) {
    return vec4(color.r * color.r, color.g * color.g, color.b * color.b, color.a);
}

vec4 HDR2LDR(vec4 color) {
    return vec4(1.0f - pow(2.0, -fBrightness * color.r), 1.0f - pow(2.0f, -fBrightness * color.g), 1.0f - pow(2.0f, -fBrightness * color.b), color.a);
}

uniform float moodR, moodG, moodB;
uniform float fRatio = 0.4; 	//[0.00 to 3.00] Amount of moody coloring you want
vec3 MoodPass( in vec3 colorInput ) {
    vec3 colInput = colorInput;
    vec3 colMood = vec3(1.0f);
    
    colMood.r = moodR;
    colMood.g = moodG;
    colMood.b = moodB;
    
    float fLum = ( colInput.r + colInput.g + colInput.b ) / 3.0f;
    colMood = mix(vec3(0.0), colMood, clamp(fLum * 2.0, 0.0, 1.0));
    colMood = mix(colMood, vec3(1.0), clamp(fLum - 0.5, 0.0, 1.0) * 2.0);
    
    vec3 colOutput = mix(colInput, colMood, clamp(fLum * fRatio, 0.0, 1.0));
    colInput = max(vec3(0.0), colOutput);
    
    return colInput;
}

vec3 CrossPass( in vec3 colors ) {
#ifdef CROSSPASS1
    vec2 vec1s = vec2 (1.03, 0.04);
    vec2 vec2s = vec2 (1.09, 0.01);
    vec2 vec3s = vec2 (0.78, 0.13);
    
    vec3 image1 = colors;
    vec3 image2 = colors;
    float gray = dot(vec3(0.5,0.5,0.5), image1);
    image1 = mix (vec3(gray), image1,CrossSaturation);
    image1 = mix (vec3(0.35), image1,CrossContrast);
    image1 += vec3(CrossBrightness);
    image2.r = image1.r * vec1s.x + vec1s.y;
    image2.g = image1.g * vec2s.x + vec2s.y;
    image2.b = image1.b * vec3s.x + vec3s.y;
    colors = mix(image1, image2, CrossAmount);
    return colors;
#else
    
    //pre-gain
    colors = colors * 1.0;//(BRIGHTMULT) + 0.03;
    //compensate for low-light artifacts
    colors = colors + 0.029;
    
    //calculate double curve
    float dbr = -colors.r + 1.4;
    float dbg = -colors.g + 1.4;
    float dbb = -colors.b + 1.4;
    
    //fade between simple gamma up curve and double curve.
    float pr = mix(dbr, 0.65, 0.5);
    float pg = mix(dbg, 0.65, 0.5);
    float pb = mix(dbb, 0.65, 0.5);
    //fade between brightness.
    colors.r = pow((colors.r * 0.95 - 0.002), pr);
    colors.g = pow((colors.g * 0.95 - 0.002), pg);
    colors.b = pow((colors.b * 0.99 + 0.000), pb);
    
    return colors;
#endif
}

float LinearizeDepth(vec2 uv)
{
    float n = 0.1;		// camera z near
    float f = 3000.0;		// camera z far
    float z = texture(depthTexture, uv).x;
    return (2.0 * n) / (f + n - z * (f - n));
}

//! Motion blur stuff & things.
uniform mat4 prevViewProj, invProjView;              //! Previous view projection.


void main()
{
    // Post-processed rendered texture( lighting applied ).
    color = textureLod(renderedTexture, UV, 0);

//    // 2D Lens FX
//#ifdef USE_LENS
//    vec3 dust = texture( uLensColor, UV ).rgb * 4.0;
//    col += vec4( dust * lightSourcesAndLighting.rgb, 1.0 );
//#endif

//    FXAA_Image( color );

//    // Deferred rendering!
//    float depthScreen = textureLod( depthTexture, UV, 0 ).x;
//
//    // Scene depth.
//    float depthNDC = depthScreen * 2.0 - 1.0;
//    vec4 projectedPos = vec4( UV * 2.0 - 1.0, depthNDC, 1.0);
//    vec4 sPos = invProjView * projectedPos; // Needs some optimization.
//    // Get current world space position:
//    vec3 current = sPos.xyz / sPos.w;
//
    
//    // Motion blur is now also in SSTAA shader.
//    // Physically correct motion blur. At ~30 fps = filmic appearance.
//    
//    // get previous screen space position:
//    vec4 previous = prevViewProj * vec4(current, 1.0);
//    previous.xyz /= previous.w;
//    previous.xy = previous.xy * 0.5 + 0.5;
//    
//    vec2 blurVec = (UV - previous.xy) / 2.0;
    
//    const int nSamples = 8;
//
//    for( int i = 1; i < nSamples; ++i ) {
//        // get offset in range [-0.5, 0.5]:
//        vec2 offset = blurVec * (float(i) / float(nSamples - 1) - 0.5);
//        
//        // Not physically correct.
//        //float maxVelocity = 0.5f;
//        //offset = clamp(offset, vec2(-maxVelocity), vec2(maxVelocity));
//        
//        // sample & add to result:
//        color += texture(renderedTexture, UV + offset );
//    }
//    
//    color /= float(nSamples);
    
    
    
//    // Crosspassing.
//    color.rgb = CrossPass(color.rgb);
    // Color boosting.
    color.r = (color.r)*(COLOR_BOOST + 1.0) + (color.g + color.b)*(-COLOR_BOOST);
    color.g = (color.g)*(COLOR_BOOST + 1.0) + (color.r + color.b)*(-COLOR_BOOST);
    color.b = (color.b)*(COLOR_BOOST + 1.0) + (color.r + color.g)*(-COLOR_BOOST);

    color.rgb = max( color.rgb, vec3( 1e-4 ) );
    
    
    // Emissive, already downsampled and blurred in both passes.
    vec4 emissiveGlow = textureLod( emissiveSampler, UV, 0 );
    color.rgb = color.rgb + (emissiveGlow.rgb * fBloomIntensity);
}
#endif
