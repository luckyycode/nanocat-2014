
//
//          *                  *
//             __                *
//           ,db'    *     *
//          ,d8/       *        *    *
//          888
//          `db\       *     *
//            `o`_                    **
//         *               *   *    _      *
//               *                 / )
//             *    /\__/\ *       ( (  *
//           ,-.,-.,)    (.,-.,-.,-.) ).,-.,-.
//          | @|  ={      }= | @|  / / | @|o |
//         _j__j__j_)     `-------/ /__j__j__j_
//          ________(               /___________
//          |  | @| \              || o|O | @|
//          |o |  |,'\       ,   ,'"|  |  |  |  hjw
//          vV\|/vV|`-'\  ,---\   | \Vv\hjwVv\//v
//                     _) )    `. \ /
//                    (__/       ) )
//    _   _        _                                _
//   | \ | |  ___ | | __ ___     ___  _ __    __ _ (_) _ __    ___
//   |  \| | / _ \| |/ // _ \   / _ \| '_ \  / _` || || '_ \  / _ \
//   | |\  ||  __/|   <| (_) | |  __/| | | || (_| || || | | ||  __/
//   |_| \_| \___||_|\_\\___/   \___||_| |_| \__, ||_||_| |_| \___|
//                                           |___/
//
//  OpenGL composite shader.
//

#ifdef USE_PRECISION
precision PRECISION_TYPE float;
#endif

#ifdef _VERTEX_

layout( location = 0 ) in vec3 model_vertexpos;
//layout( location = 1 ) in vec2 model_uvs;

noperspective out vec2 UV;

void main()
{
    //UV = model_uvs;
    UV = (model_vertexpos.xy + vec2( 1.0, 1.0 )) / 2.0;
    gl_Position =  vec4( model_vertexpos, 1.0 );
}

#endif

#ifdef _FRAGMENT_


//! UV coords.
noperspective in vec2 UV;

uniform sampler2D renderedTexture;

//! Render target texture out.
layout( location = 0 ) out vec4 color;

void main()
{
    color = textureLod(renderedTexture, UV, 0);
}
#endif
