//
//          *                  *
//             __                *
//           ,db'    *     *
//          ,d8/       *        *    *
//          888
//          `db\       *     *
//            `o`_                    **
//         *               *   *    _      *
//               *                 / )
//             *    /\__/\ *       ( (  *
//           ,-.,-.,)    (.,-.,-.,-.) ).,-.,-.
//          | @|  ={      }= | @|  / / | @|o |
//         _j__j__j_)     `-------/ /__j__j__j_
//          ________(               /___________
//          |  | @| \              || o|O | @|
//          |o |  |,'\       ,   ,'"|  |  |  |  hjw
//          vV\|/vV|`-'\  ,---\   | \Vv\hjwVv\//v
//                     _) )    `. \ /
//                    (__/       ) )
//    _   _        _                                _
//   | \ | |  ___ | | __ ___     ___  _ __    __ _ (_) _ __    ___
//   |  \| | / _ \| |/ // _ \   / _ \| '_ \  / _` || || '_ \  / _ \
//   | |\  ||  __/|   <| (_) | |  __/| | | || (_| || || | | ||  __/
//   |_| \_| \___||_|\_\\___/   \___||_| |_| \__, ||_||_| |_| \___|
//                                           |___/
//
//  OpenGL water shader.
//

#ifdef USE_PRECISION
    precision PRECISION_TYPE float;
#endif

//! ( Time, visibility ).
uniform vec2 time_density;

#ifdef _VERTEX_

/******************************
 *  Beautiful water shader.   *
 ******************************/

layout(location = 0) in vec4 oVertex;
layout(location = 1) in vec2 oUV;
layout(location = 2) in vec3 oNormal;

//!  Some matrices.
uniform mat4 MVP;
uniform mat4 ModelMatrix;

out vec2 mUV;
out vec4 vPos, vWorld, vVertex;
out vec4 normal;
out vec3 fragmentPosition;

out vec4 FoamUV;
out vec4 Wave0UV, Wave1UV;

void main()
{
    gl_Position = MVP * oVertex;
    
	vPos = gl_Position;
    
    vWorld = ModelMatrix * oVertex;
    vVertex = oVertex;
	normal = ModelMatrix * vec4( oNormal, 0.0 );

    mUV = oUV;
    
    fragmentPosition = vec3(gl_Position.xy / gl_Position.w, gl_Position.w);

    
    // Output texture coordinates for foam - don't touch texture scales! hand tweaked stuff
    float fAnimFoam = 1.3725 * time_density.x;
    
    FoamUV.xy = mUV.xy * vec2( 0.2, 0.2 ) * 128 * 3.0 - fAnimFoam;
    FoamUV.wz = mUV.yx * vec2( 0.2, 0.2 )* 128 * 2.1 + fAnimFoam;
    
    vec2 vTranslation= vec2(time_density.x * 0.295);
    
    Wave0UV.xy = mUV.xy*24.0 + vTranslation.xy*2.0;
    Wave0UV.wz = mUV.xy*8.0 + vTranslation.xy*3.0;
    Wave1UV.xy = (mUV.xy*24.0 + vTranslation.xy*2.0);
    Wave1UV.wz = (mUV.xy*48.0 + vTranslation.xy*3.0);
}

#endif

#ifdef _FRAGMENT_

uniform vec3 fogColor;                  // Set the water color (R,G,B).

uniform vec4 mWaterColor;               // Water color.
uniform vec3 mLightPosition;            // Light direction.

uniform sampler2D normal_texture;       // Water normal texture.
uniform sampler2D reflection_texture;   // Refraction.
uniform sampler2D refraction_texture;   // Reflection.
uniform sampler2D depth_texture;        // Depth buffer.
uniform sampler2D foamSampler;         // Foam sampler.

uniform vec3 cameraPos;                 // Camera position.

in vec4 vPos, vWorld, vVertex;
in vec2 mUV;
in vec4 normal;
in vec3 fragmentPosition;
in vec4 FoamUV;

in vec4 Wave0UV, Wave1UV;

layout(location = 0) out vec4 outColor;
layout(location = 1) out vec4 outNormal;
layout(location = 2) out vec4 outVisual;
layout(location = 3) out vec4 outPosition;

/**
 *  Calculate linear depth.
 *
 *  @param value Depth value.
 */
float calculate_linear_depth( float value ) {
    return 2.0 * ZNEAR * ZFAR / (ZFAR + ZNEAR - (2.0 * value - 1.0) * (ZFAR - ZNEAR) );
}

const float distanceSmoothness = 0.005;
const float BigWavesScale = 128.0;
const float SmallWavesScale = 64.0;
const float BumpScale = 2.0;

vec4 Linear2Gamma(vec4 color)
{
    return vec4(sqrt(color.r), sqrt(color.g), sqrt(color.b), color.a);
}


void main()
{
    // Create waves.
    vec3 bumpNormal = vec3(0.0,1.0,0.0);

    vec3 bumpColorA = vec3(0.0,1.0,0.0);
    vec3 bumpColorB = vec3(0.0,1.0,0.0);
    vec3 bumpColorC = vec3(0.0,1.0,0.0);
    vec3 bumpColorD = vec3(0.0,1.0,0.0);
    vec3 bumpLowFreq = vec3(0.0,1.0,0.0);
    vec3 bumpHighFreq = vec3(0.0,1.0,0.0);
    
    // merge big waves
    bumpColorA = texture(normal_texture, Wave0UV.xy).xzy;
    bumpColorB = texture(normal_texture, Wave0UV.wz).xzy;
    
    bumpLowFreq = (bumpColorA + bumpColorB)*BigWavesScale - BigWavesScale;                       // 2 alu
    
    // merge small waves
    bumpColorC = texture(normal_texture, Wave1UV.xy).xzy;
    bumpColorD = texture(normal_texture, Wave1UV.wz).xzy;
    
    bumpHighFreq = (bumpColorC + bumpColorD)*SmallWavesScale - SmallWavesScale;            // 2 alu
    
    // merge all waves
    bumpNormal = bumpLowFreq + bumpHighFreq;                                                     // 1 alu
    bumpNormal *= BumpScale;                                                                     // 1 alu

	// Using xzy to make normals world-spaced.
    vec3 normalA = bumpNormal;//normalize(bumpNormal + vec3(0.0, 1.0, 0.0));
    
    float distVal = exp(-fragmentPosition.z * distanceSmoothness);
    float distValPow = pow(distVal, 10.0);
    
//    normalA    = mix( vec3(0.0, 1.0, 0.0), normalA, distValPow );
    
    vec3 sunNormal = normalize( normalA );

    // Clamp max bump to 0.15
    normalA.xyz = sunNormal.xyz;
    normalA.xy *= 0.15;
    
	// Normalized light position.
	vec3 lpnorm   = normalize(cameraPos - mLightPosition);
	// Normalized view vector.
	vec3 vpnorm   = normalize(cameraPos - vVertex.rgb);
	// Projection coordinates as texture coordinates.
	vec3 proj_tc  = 0.5 * vPos.xyz / vPos.w + 0.5;
	// Get reflection/refraction coef.
	float fresnelA = 1.0 - dot( vpnorm, sunNormal );
    
    // –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã –¥–æ —Ç–æ—á–∫–∏
    float fOwnDepth = calculate_linear_depth(proj_tc.z);
    // —Å—á–∏—Ç—ã–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Å—Ü–µ–Ω—ã
    float fSampledDepth = texture(depth_texture, proj_tc.xy).x;
    // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –≤ –ª–∏–Ω–µ–π–Ω—É—é (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã)
    fSampledDepth       = calculate_linear_depth(fSampledDepth);
    // –ø–æ–ª—É—á–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é –≥–ª—É–±–∏–Ω—É –≤–æ–¥—ã
    float fLinearDepth  = fSampledDepth - fOwnDepth;
    
#ifdef Z_CLIP
    if( fSampledDepth < vPos.z ) {
        discard;
    }
#endif
    
	// Correct colors.
	float fExpDepth = 1.0 - exp( -time_density.y * fLinearDepth );
    // This is used to make smooth transitions.
    float fExpDepthHIGH = 1.0 - exp( -0.01 /* scene depth exp */ * fLinearDepth );
    // And this is used for water foam depth.
    float fFoamDepthExp = 1.0 - exp( -0.325 * fLinearDepth );
    
    
    /**     Specular reflections!   **/

//#ifdef USES_SCHLICK_APPROXIMATION
//    // –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –®–ª–∏–∫–∞ a^b = a / (b ‚Äì a*b + a) –¥–ª—è a –æ—Ç –Ω—É–ª—è –¥–æ –µ–¥–∏–Ω–∏—Ü—ã
//    VdotR /= 1024.0 - VdotR * 1024.0 + VdotR;
//#else
//    VdotR = pow( VdotR, 512.0 );
//#endif

    vec3 R = reflect(vpnorm, sunNormal);
    
    float specTerm = clamp(pow(max(dot(R, lpnorm),0.0),512.0),0.0,1.0);
    vec3 specular = specTerm * fogColor;// * distValPow;
    
	// Distortion.
	float fDistortScale = clamp(0.1 * fExpDepth, 0.01, 0.99);
	vec2 vDistort = normalA.zx * fDistortScale; // Fix texture coordinates.
    
    vec2 Distortion =  proj_tc.st + vDistort;
    vec2 refractTexCoords = clamp( Distortion, 0.001, 0.999 );
    
	// Get Depth from distorted coordinates.
	float fDistortedDepth = texture( depth_texture, refractTexCoords ).x;

	// Make it Linear.
	fDistortedDepth = calculate_linear_depth( fDistortedDepth );
    
	float fDistortedExpDepth = 1.0 - exp( -time_density.y /* visibility */ * (fDistortedDepth - fOwnDepth) );

	// Check if distance.
	if( fOwnDepth > fDistortedDepth ) {
        vDistort = proj_tc.xy;// vec2(0.0);
		fDistortedExpDepth = fExpDepth;
	}
 
	// Get refracted light.
    vec3 refractionA = vec3(0.0);
    
    vec2 Offset = normalA.zx * vec2( 0.01, -0.01 );
    refractionA.r = texture(refraction_texture, refractTexCoords - Offset * 0.8).r;
    refractionA.g = texture(refraction_texture, refractTexCoords - Offset * 0.9).g;
    refractionA.b = texture(refraction_texture, refractTexCoords - Offset * 1.0).b;

    // Make it look cool.
    refractionA = mix( refractionA, mWaterColor.rgb, fDistortedExpDepth );
	// Reflection stuff.
	vDistort = normalA.xy * 0.0925;

    // Reflection sampler.
    vec3 reflection = textureLod( reflection_texture, proj_tc.st + vDistort.st, 2.0 ).xyz;
	float fMix = fresnelA * fExpDepthHIGH;
    
//    // only the crests of water waves generate double refracted light
//    float fScatterFactor = 0.1 * max( 0.0, mVertex.y * 0.85 + 0.25 );
//
//    // fading scatter out by 90% near shores so it looks better
//    fScatterFactor  *= 0.6 + 0.9 * fMix;

    // Final.
    vec3 result_color = mix( refractionA, reflection, fMix );//fSurfaceShadow;

    /**     Water foam.     **/

    vec3 cFoam = texture(foamSampler, FoamUV.wz + mUV * 32 ).xyz;
    cFoam += texture(foamSampler, FoamUV.xy + mUV * 32 ).xyz;
    
    float fFoamLuminance = dot( cFoam.xyz, vec3(0.333)) - 1.0;
    fFoamLuminance = clamp( fFoamLuminance, 0.0, 1.0 );

    float foamMask = smoothstep( 0.4, 0.8, 1.0 - fFoamDepthExp ) ;
    
    vec3 cFoamFinal = foamMask * fFoamLuminance * fogColor;
    result_color.xyz += cFoamFinal * 0.875;
    
	// Add specularity and another thingies.
    result_color += specular;
	// —É—Ä–∞! –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    
    vec3 normalB = normalize(normal.rgb);
    outColor = vec4( result_color, /*clamp(fSampledDepth / 5.0,0.0,1.0)*/1.0 - clamp(1.0/fragmentPosition.z, 0.0, 1.0) ); // awesome view
    outColor.rgb = mix( fogColor, outColor.rgb, distVal );
    
    outNormal = vec4( normalB.x * 0.5 + 0.5, normalB.y * 0.5 + 0.5, normalB.z * 0.5 + 0.5, 0.7 );
    outVisual = outColor;//vec4( 1.0, 1.0, 1.0, 1.0 );

    outColor = Linear2Gamma(outColor);
    outPosition = vec4(0.0f);
//    gl_FragDepth = gl_FragCoord.z;
}

#endif//